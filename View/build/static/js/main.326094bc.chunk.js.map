{"version":3,"sources":["components/AppMenu/AppMenuItemRouter.tsx","components/AppMenu/AppMenuItem.tsx","components/AppMenu/AppMenu.tsx","components/Dashboard/Dashboard.tsx","api/api.tsx","components/Chiropractors/Chiropractors.tsx","components/Healing/Healing.tsx","components/Patients/Patients.tsx","components/Share/SocialMedia.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AppMenuItemRouter","props","className","link","onClick","children","ListItem","button","component","forwardRef","ref","exact","innerRef","to","useStyles","PropTypes","string","isRequired","elementType","array","makeStyles","theme","createStyles","menuItem","background","color","menuItemIcon","AppMenuItem","name","Icon","items","classes","isExpandable","length","useState","open","setOpen","MenuItemRoot","ListItemIcon","ListItemText","primary","inset","MenuItemChildren","Collapse","in","timeout","unmountOnExit","Divider","List","disablePadding","map","item","index","key","appMenuItems","IconDashBoard","IconChiropractor","IconPeople","HealingIcon","IconBarChart","IconLibraryBooks","appMenu","width","navList","AppMenu","root","minWidth","Dashboard","user","useAuth0","Calendar","calendarEvents","title","start","Date","Card","CardContent","Grid","nickname","CardActions","plugins","dayGridPlugin","interactionPlugin","initialView","editable","selectable","select","selectInfo","prompt","calendarAPI","view","calendar","unselect","addEvent","startStr","end","endStr","allDay","eventClick","clickInfo","console","log","event","remove","events","API_BASE_URL","Chiropractor_API_URL","getArray","a","fetch","headers","then","res","json","response","postArray","data","method","body","JSON","stringify","catch","error","editArray","id","chiropractorId","firstName","lastName","emailAddress","deleteArray","Chiropractors","tableIcons","Search","Delete","Edit","Clear","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","chiropractorDetails","setchiropractorDetails","formData","setFormData","editData","setEditData","useForm","handleSubmit","errors","isLoading","setIsLoading","handleChange","e","target","value","deletePost","editPost","useEffect","makeArrayRequest","onSubmit","TextField","type","onChange","Button","variant","icons","columns","field","actions","icon","tooltip","rowData","options","sorting","actionsColumnIndex","Healing","muscles","handleClick","exercise","muscle","stats","exercises","frequency","alert","highlightedColors","Patients","Typography","SocialMedia","FacebookShareButton","FacebookIcon","size","round","url","window","location","TwitterShareButton","TwitterIcon","href","RedditShareButton","RedditIcon","PageDashboard","PageChiropractors","PagePatients","PageHealing","display","drawerPaper","position","whiteSpace","paddingTop","spacing","paddingBottom","content","flexGrow","height","overflow","container","withAuthenticationRequired","darkMode","setDarkMode","createMuiTheme","palette","loginWithRedirect","logout","ThemeProvider","Paper","clsx","CssBaseline","Drawer","paper","ToggleButton","selected","returnTo","origin","Container","maxWidth","path","Boolean","hostname","match","ReactDOM","render","domain","clientId","redirectUri","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.326094bc.chunk.js","sourcesContent":["import React, { forwardRef } from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport { NavLink, NavLinkProps } from 'react-router-dom';\r\n\r\n\r\nexport interface AppMenuRouterProps {\r\n    className?: string\r\n    link?: string | null\r\n    onClick?: (event: React.MouseEvent<HTMLElement>) => void\r\n}\r\n\r\nconst AppMenuItemRouter: React.FC<AppMenuRouterProps> = props => {\r\n    const { className, link, onClick, children } = props\r\n\r\n    if (!link || typeof link !== 'string') {\r\n        return (\r\n            <ListItem\r\n                button\r\n                className={className}\r\n                children={children}\r\n                onClick={onClick}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <ListItem\r\n            button\r\n            className={className}\r\n            children={children}\r\n            component={forwardRef((props: NavLinkProps, ref: any) => <NavLink exact {...props} innerRef={ref} />)}\r\n            to={link}\r\n        />\r\n\r\n    )\r\n}\r\n\r\nexport default AppMenuItemRouter;","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Collapse from '@material-ui/core/Collapse';\r\n\r\nimport IconExpandLess from '@material-ui/icons/ExpandLess';\r\nimport IconExpandMore from '@material-ui/icons/ExpandMore';\r\n\r\nimport AppMenuItemRouter from './AppMenuItemRouter';\r\n\r\nexport const AppMenuItemPropTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    link: PropTypes.string,\r\n    Icon: PropTypes.elementType,\r\n    items: PropTypes.array,\r\n}\r\n\r\ntype AppMenuItemPropTypes = PropTypes.InferProps<typeof AppMenuItemPropTypes>\r\ntype AppMenuItemPropsWithoutItems = Omit<AppMenuItemPropTypes, 'items'>\r\n\r\nexport type AppMenuItemProps = AppMenuItemPropsWithoutItems & {\r\n    items?: AppMenuItemProps[]\r\n}\r\n\r\nconst AppMenuItem: React.FC<AppMenuItemProps> = props => {\r\n    const { name, link, Icon, items = [] } = props\r\n    const classes = useStyles()\r\n    const isExpandable = items && items.length > 0\r\n    const [open, setOpen] = useState(false)\r\n\r\n    function handleClick() {\r\n        setOpen(!open)\r\n    }\r\n\r\n    const MenuItemRoot = (\r\n        <AppMenuItemRouter className={classes.menuItem} link={link} onClick={handleClick}>\r\n            {!!Icon && (\r\n                <ListItemIcon className={classes.menuItemIcon}>\r\n                    <Icon />\r\n                </ListItemIcon>\r\n            )}\r\n            <ListItemText primary={name} inset={!Icon} />\r\n            { isExpandable && !open && <IconExpandMore />}\r\n            { isExpandable && open && <IconExpandLess />}\r\n        </AppMenuItemRouter>\r\n    )\r\n\r\n    const MenuItemChildren = isExpandable ? (\r\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n            <Divider />\r\n            <List component=\"div\" disablePadding>\r\n                {items.map((item, index) => (\r\n                    <AppMenuItem {...item} key={index} />\r\n                ))}\r\n            </List>\r\n        </Collapse>\r\n    ) : null\r\n\r\n\r\n    return (\r\n        <>\r\n            {MenuItemRoot}\r\n            {MenuItemChildren}\r\n        </>\r\n    )\r\n}\r\nAppMenuItem.propTypes = AppMenuItemPropTypes\r\n\r\nconst useStyles = makeStyles(theme =>\r\n    createStyles({\r\n        menuItem: {\r\n            '&.active': {\r\n                background: 'light-blue',\r\n                '& .MuiListItemIcon-root': {\r\n                    color: '#fff'\r\n                },\r\n            },\r\n        },\r\n        menuItemIcon: {\r\n            color: '#fff',\r\n        },\r\n    }),\r\n)\r\n\r\nexport default AppMenuItem;","import React from 'react'\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\r\n\r\nimport List from '@material-ui/core/List';\r\n\r\nimport IconDashBoard from '@material-ui/icons/Dashboard';\r\nimport IconShoppingCart from '@material-ui/icons/ShoppingCart';\r\nimport IconPeople from '@material-ui/icons/People';\r\nimport IconBarChart from '@material-ui/icons/BarChart';\r\nimport IconLibraryBooks from '@material-ui/icons/LibraryBooks';\r\nimport IconChiropractor from '@material-ui/icons/VerifiedUser';\r\nimport HealingIcon from '@material-ui/icons/Healing';\r\n\r\nimport AppMenuItem from './AppMenuItem';\r\n\r\nconst appMenuItems = [\r\n    {\r\n        name: 'Dashboard',\r\n        link: '/',\r\n        Icon: IconDashBoard,\r\n    },\r\n    {\r\n        name: 'Chiropractor List',\r\n        link: '/chiropractors',\r\n        Icon: IconChiropractor,\r\n    },\r\n    {\r\n        name: 'Patient List',\r\n        link: '/patients',\r\n        Icon: IconPeople,\r\n    },\r\n    {\r\n        name: 'Healing',\r\n        link: '/healing',\r\n        Icon: HealingIcon,\r\n    },\r\n    {\r\n        name: 'Reports',\r\n        link: '/reports',\r\n        Icon: IconBarChart,\r\n    },\r\n    {\r\n        name: 'Appointments',\r\n        Icon: IconLibraryBooks,\r\n        items: [\r\n            {\r\n                name: 'Urgrent',\r\n            },\r\n            {\r\n                name: 'All',\r\n            },\r\n        ],\r\n    },\r\n]\r\n\r\nconst AppMenu: React.FC = () => {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <List component=\"nav\" className={classes.appMenu} disablePadding>\r\n            {appMenuItems.map((item, index) => (\r\n                <AppMenuItem {...item} key={index} />\r\n            ))}\r\n        </List>\r\n    )\r\n}\r\n\r\nconst drawerWidth = 240\r\n\r\nconst useStyles = makeStyles(theme =>\r\n    createStyles({\r\n        appMenu: {\r\n            width: '100',\r\n        },\r\n        navList: {\r\n            width: drawerWidth,\r\n        },\r\n        menuItem: {\r\n            width: drawerWidth,\r\n        },\r\n        menuItemIcon: {\r\n            color: '#fff',\r\n        },\r\n    }),\r\n);\r\n\r\nexport default AppMenu;","import React, {useState}  from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport {Card, CardContent, CardActions, Grid } from '@material-ui/core';\r\nimport FullCalendar, {EventClickArg, DateSelectArg, EventApi} from '@fullcalendar/react';\r\n\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport interactionPlugin from '@fullcalendar/interaction';\r\n\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        minWidth: 275,\r\n    },\r\n})\r\n\r\nconst Dashboard = () => {\r\n    const classes = useStyles();\r\n    const {user} = useAuth0();\r\n    const [data, setData] = useState<any[]>([]);\r\n    const Calendar = {\r\n        calendarEvents: [\r\n            {title: \"Today Event\", start: new Date() }\r\n        ]\r\n    }\r\n\r\n   /* useEffect(() => {\r\n        const getCalendarRequest = async () => {\r\n            setData(calendarEvents());\r\n        }\r\n        getCalendarRequest();\r\n    }, []);*/\r\n\r\n    const handleEventClick = (clickInfo: EventClickArg) => {\r\n          console.log(\"hello world\")\r\n          clickInfo.event.remove();\r\n      }\r\n\r\n    const handleDateSelect = (selectInfo: DateSelectArg) => {\r\n        let title = prompt('Please enter your new booking');\r\n        let calendarAPI = selectInfo.view.calendar\r\n\r\n        calendarAPI.unselect()\r\n\r\n        if (title) {\r\n            calendarAPI.addEvent({\r\n                title,\r\n                start: selectInfo.startStr,\r\n                end: selectInfo.endStr,\r\n                allDay: selectInfo.allDay\r\n            })\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <Card className={classes.root }>\r\n                <CardContent>\r\n                    <Grid>\r\n                        Hello {user.nickname}!\r\n                    </Grid>\r\n                    <CardActions>\r\n                        What do you have on today? \r\n                        <br></br>\r\n                        Click on Calendar Schedule to add in events.\r\n                    </CardActions>\r\n                </CardContent>\r\n            </Card>\r\n            <FullCalendar\r\n            plugins={[dayGridPlugin, interactionPlugin]}\r\n            initialView=\"dayGridMonth\"\r\n            editable={true}\r\n            selectable={true}\r\n            select={handleDateSelect}\r\n            eventClick={handleEventClick}\r\n            events={Calendar.calendarEvents}\r\n            />\r\n        </>\r\n    )\r\n\r\n}\r\nexport default Dashboard;","import Axios from 'axios';\r\nimport { IChiropractors, ICalendar } from '../common/Interface';\r\n\r\n/*const API_BASE_URL = process.env.NODE_ENV === \"development\" ? \"https://chiropractor-api.azurewebsites.net/api/\" : \"https://localhost:44361/api/\";*/\r\nconst API_BASE_URL = process.env.NODE_ENV === \"development\" ? \"https://chiropractor-api.azurewebsites.net/api/\" : \"https://chiropractor-api.azurewebsites.net/api/\";\r\nconst Chiropractor_API_URL = API_BASE_URL + \"chiropractors/\";\r\n/*const Chiropractor_ID_API_URL = Chiropractor_API_URL + ${id};*/\r\nconst Calendar_API_URL = API_BASE_URL + \"calendars/\";\r\n\r\nexport const getArray = async () => {\r\n    const response = await fetch(Chiropractor_API_URL, {\r\n        headers: {\r\n            'Accept': \"application/json\",\r\n            'Content-Type': \"application/json\"\r\n        },\r\n    }).then((res) => res.json());\r\n    return response;\r\n}\r\n\r\nexport const postArray = async (data: IChiropractors | {}) => {\r\n    const response = await fetch(Chiropractor_API_URL, {\r\n        method: 'POST',\r\n        body: JSON.stringify(data),\r\n        headers: {\r\n            'Accept': \"application/json\",\r\n            'Content-Type': \"application/json\"\r\n        },\r\n    })\r\n    return response.json()\r\n        .then(data => {\r\n            console.log('Success:', data);\r\n        })\r\n        .catch((error) => {\r\n            console.log('Error:', error);\r\n        })\r\n}\r\n\r\nexport const editArray = async (id: any | {}) => {\r\n    const response = await fetch(Chiropractor_API_URL + `${id}`, {\r\n        method: 'PUT',\r\n        body: JSON.stringify({\r\n            chiropractorId: 48,\r\n            firstName: 'I have been Edited',\r\n            lastName: 'Edited',\r\n            emailAddress: 'Edited@hotmail.com',\r\n          }), \r\n        headers: {\r\n            'Accept': \"application/json\",\r\n            'Content-Type': \"application/json\"\r\n        },\r\n    })\r\n    return response.json()\r\n        .then(data => {\r\n            console.log('Success:', data);\r\n        })\r\n        .catch((error) => {\r\n            console.log('Error:', error);\r\n        })\r\n}\r\n\r\nexport const deleteArray = async (id: IChiropractors | {}) => {\r\n    const response = await fetch(Chiropractor_API_URL + `${ id }`, {\r\n        method: 'DELETE',\r\n    })\r\n    return response.json()\r\n        .then(id => {\r\n            console.log('Success:', id);\r\n        })\r\n        .catch((error) => {\r\n            console.log('Error:', error);\r\n        })\r\n}\r\n\r\nexport const calendarEvents = async (id: ICalendar | {}) => {\r\n    const response = await Axios.get('Calendar_API_URL')\r\n        .then(response => {\r\n            console.log(response);\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error)\r\n        })\r\n    return response\r\n}","import React, { useState, useEffect, forwardRef } from 'react';\r\nimport { IChiropractors } from '../../common/Interface';\r\n\r\nimport { getArray, postArray, editArray, deleteArray } from '../../api/api';\r\nimport { useForm } from 'react-hook-form';\r\n\r\nimport { Button, TextField } from \"@material-ui/core/\";\r\n\r\nimport MaterialTable, { Column } from \"material-table\";\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Search from '@material-ui/icons/Search';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\n\r\nexport const Chiropractors = () => {\r\n\r\n    const tableIcons = {\r\n        Search: forwardRef((props, ref: React.Ref<SVGSVGElement>) => <Search {...props} ref={ref} />),\r\n        Delete: forwardRef((props, ref: React.Ref<SVGSVGElement>) => <DeleteOutline {...props} ref={ref} />),\r\n        Edit: forwardRef((props, ref: React.Ref<SVGSVGElement>) => <Edit {...props} ref={ref} />),\r\n        Clear: forwardRef((props, ref: React.Ref<SVGSVGElement>) => <Clear {...props} ref={ref} />),\r\n        FirstPage: forwardRef((props, ref: React.Ref<SVGSVGElement>) => <FirstPage {...props} ref={ref} />),\r\n        LastPage: forwardRef((props, ref: React.Ref<SVGSVGElement>) => <LastPage {...props} ref={ref} />),\r\n        NextPage: forwardRef((props, ref: React.Ref<SVGSVGElement>) => <ChevronRight {...props} ref={ref} />),\r\n        PreviousPage: forwardRef((props, ref: React.Ref<SVGSVGElement>) => <ChevronLeft {...props} ref={ref} />),\r\n        ResetSearch: forwardRef((props, ref: React.Ref<SVGSVGElement>) => <Clear {...props} ref={ref} />)\r\n    }\r\n\r\n    const [chiropractorDetails, setchiropractorDetails] = useState<any[]>([]);\r\n    const [formData, setFormData] = useState<any[]>([]);\r\n    const [editData, setEditData] = useState<any[]>([]);\r\n    const { handleSubmit, errors } = useForm<IChiropractors>();\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    type RowData = {}\r\n\r\n    const columns = [\r\n        { title: \"First Name\", field: \"firstName\" },\r\n        { title: \"Last Name\", field: \"lastName\" },\r\n        { title: \"Email Address\", field: \"emailAddress\" },\r\n        { title: \"Phone Number\", field: \"phoneNumber\", type: \"numeric\" },\r\n    ] as Column<RowData>[]\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setFormData({ ...formData, [e.target.name]: e.target.value })\r\n        console.log(formData)\r\n    }\r\n\r\n    const onSubmit = (data: IChiropractors | {}) => {\r\n        console.log(\"Submit: \", formData);\r\n        postArray(formData)\r\n    }\r\n\r\n    const deletePost = async (id: any) => {\r\n        await deleteArray(id)\r\n    };\r\n\r\n    const editPost = async (id: any | {}) => {\r\n        setEditData({...editData})\r\n        console.log(editPost);\r\n        console.log(editData)\r\n        await editArray(id)\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        const makeArrayRequest = async () => {\r\n            setchiropractorDetails(await getArray());\r\n        }\r\n        makeArrayRequest();\r\n        setIsLoading(false);\r\n    }, [handleChange, deletePost, editPost])\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3>Add new Chiropractor</h3>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <label>Id: </label>\r\n                <TextField\r\n                    type=\"text\"\r\n                    id=\"id\"\r\n                    name=\"ID\"\r\n                />\r\n                <label>First Name: </label>\r\n                <TextField\r\n                    type=\"text\"\r\n                    id=\"firstName\"\r\n                    name=\"firstName\"\r\n                    onChange={handleChange}\r\n\r\n                />\r\n                <label>Last Name: </label>\r\n                <TextField\r\n                    type=\"text\"\r\n                    id=\"lastName\"\r\n                    name=\"lastName\"\r\n                    onChange={handleChange}\r\n                />\r\n                <label>Email Address: </label>\r\n                <TextField\r\n                    type=\"text\"\r\n                    id=\"emailAddress\"\r\n                    name=\"emailAddress\"\r\n                    onChange={handleChange}\r\n                />\r\n                {/* <label>Phone Number: </label>\r\n                <TextField\r\n                    type=\"number\"\r\n                    id=\"phoneNumber\"\r\n                    name=\"phoneNumber\"\r\n                    onChange={handleChange}\r\n                /> */}\r\n                <Button variant=\"contained\" color=\"primary\" type=\"submit\" value=\"Submit\">Add New</Button>\r\n                <Button variant=\"contained\" color=\"default\" onClick={() => editPost(48)}>Update</Button>\r\n\r\n            </form>\r\n\r\n            <MaterialTable\r\n                title=\"List of Chiropractors\"\r\n                icons={tableIcons}\r\n                columns={columns}\r\n                data={chiropractorDetails}\r\n                actions={[\r\n                    {\r\n                        icon: () => <Edit />,\r\n                        tooltip: 'Edit User',\r\n                        onClick: (event, rowData) => {\r\n                            // Do save operation\r\n                            editPost(rowData.chiropractorId)\r\n                            console.log(rowData.chiropractorId)\r\n\r\n                        }\r\n                    },\r\n                    {\r\n                        icon: () => <DeleteOutline />,\r\n                        tooltip: 'delete User',\r\n                        onClick: (event, rowData) => {\r\n                            // Do save operation\r\n                            deletePost(rowData.chiropractorId)\r\n                            console.log(rowData.chiropractorId)\r\n                        }\r\n                    }\r\n                ]}\r\n                options={{\r\n                    sorting: true,\r\n                    actionsColumnIndex: -1,\r\n                }}\r\n                isLoading={isLoading}\r\n            />\r\n        </>\r\n    )\r\n}\r\nexport default Chiropractors;","import React from 'react';\r\nimport Model from 'react-body-highlighter';\r\nimport \"../../App.css\";\r\n\r\nconst Healing = () => {\r\n\r\n    const data = [\r\n        {\r\n          name: \"Bench Press\",\r\n          muscles: [\"chest\", \"triceps\", \"front-deltoids\"]\r\n        },\r\n        { name: \"Tricep Pushdown\", muscles: [\"triceps\"] }\r\n      ];\r\n    \r\n      const handleClick = (exercise: any) => {\r\n        const {\r\n          muscle,\r\n          stats: { exercises, frequency }\r\n        } = exercise;\r\n        alert(\r\n          `You clicked the ${muscle}! You've worked out this muscle ${frequency} times through the following exercises: ${JSON.stringify(\r\n            exercises\r\n          )}`\r\n        );\r\n      };\r\n    \r\n      return (\r\n        <div className=\"Healing\">\r\n          <Model data={data} onClick={handleClick} />\r\n          <Model\r\n            type=\"posterior\"\r\n            data={data}\r\n            highlightedColors={[\"#e65a5a\", \"#db2f2f\"]}\r\n            onClick={handleClick}\r\n          />\r\n        </div>\r\n      );\r\n}\r\n\r\nexport default Healing;","import { Typography } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\n\r\nconst Patients = () => {\r\n    return (\r\n        <>\r\n            <Typography>Patient Portal</Typography>\r\n                <Typography>Will look similar and function similar (CRUD) to chiropractor list</Typography>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Patients;","import React from 'react';\r\nimport {\r\n    FacebookIcon,\r\n    TwitterIcon,\r\n    RedditIcon,\r\n    FacebookShareButton,\r\n    TwitterShareButton,\r\n    RedditShareButton\r\n} from \"react-share\";\r\n\r\nconst SocialMedia = () => {\r\n    return (\r\n        <>\r\n            <br/>\r\n            <div>\r\n                <FacebookShareButton children={<FacebookIcon size={60} round={true} />} url={'https://www.facebook.com/sharer/sharer.php?u=' + window.location} />\r\n                <TwitterShareButton children={<TwitterIcon size={60} round={true} />} url={window.location.href} />\r\n                <RedditShareButton children={<RedditIcon size={60} round={true} />} url={window.location.href} />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SocialMedia;","import React, { useState } from \"react\";\r\nimport { Switch, Route, BrowserRouter } from 'react-router-dom'\r\nimport clsx from 'clsx';\r\n\r\nimport { makeStyles, ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Container from '@material-ui/core/Container';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport { Button } from '@material-ui/core';\r\n\r\nimport AppMenu from '../src/components/AppMenu/AppMenu';\r\nimport Dashboard from '../src/components/Dashboard/Dashboard';\r\nimport Chiropractors from '../src/components/Chiropractors/Chiropractors';\r\nimport Healing from '../src/components/Healing/Healing';\r\nimport Patients from '../src/components/Patients/Patients';\r\nimport SocialMedia from '../src/components/Share/SocialMedia';\r\n\r\nimport { useAuth0, withAuthenticationRequired } from \"@auth0/auth0-react\";\r\n\r\nconst PageDashboard = () => <Dashboard />\r\nconst PageChiropractors = () => <Chiropractors />\r\nconst PagePatients = () => <Patients />\r\nconst PageHealing = () => <Healing />\r\n\r\n\r\n\r\nconst App: React.FC = () => {\r\n    const [darkMode, setDarkMode] = useState(false);\r\n    const classes = useStyles()\r\n    const theme = createMuiTheme({\r\n        palette: {\r\n            type: darkMode ? \"dark\" : \"light\",\r\n        },\r\n    });\r\n\r\n    const { loginWithRedirect } = useAuth0();\r\n    const { logout, user } = useAuth0();\r\n    //clsx allows us to compose string class names\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <Paper>\r\n                <BrowserRouter>\r\n                    <div className={clsx('App', classes.root)}>\r\n                        <CssBaseline />\r\n                        <Drawer variant=\"permanent\" classes={{ paper: classes.drawerPaper, }}>\r\n                            <AppMenu />\r\n                            <ToggleButton selected={darkMode} onChange={() => setDarkMode(!darkMode)}>DarkMode</ToggleButton>\r\n                            <SocialMedia />\r\n                            <Button onClick={() => logout({ returnTo: window.location.origin })}>Log Out {user.nickname}</Button>\r\n                        </Drawer>\r\n                        <main className={classes.content}>\r\n                            <Container maxWidth=\"lg\" className={classes.container}>\r\n                                <Switch>\r\n                                    <Route path=\"/\" exact component={PageDashboard} />\r\n                                    <Route path=\"/chiropractors\" exact component={PageChiropractors} />\r\n                                    <Route path=\"/healing\" component={PageHealing} />\r\n                                    <Route path=\"/patients\" component={PagePatients} />\r\n                                </Switch>\r\n                            </Container>\r\n                        </main>\r\n                    </div>\r\n                </BrowserRouter>\r\n            </Paper>\r\n        </ThemeProvider>\r\n    );\r\n}\r\nconst drawerWidth = 240\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    drawerPaper: {\r\n        position: 'relative',\r\n        whiteSpace: 'nowrap',\r\n        width: drawerWidth,\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n        background: '#0253B3',\r\n        color: '#fff',\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n\r\n}));\r\n\r\n\r\nexport default withAuthenticationRequired(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Auth0Provider } from '@auth0/auth0-react';\r\n\r\nReactDOM.render(\r\n    <Auth0Provider\r\n        domain=\"dashboardhealthboard.au.auth0.com\"\r\n        clientId=\"f9Ne81UOg4KOWkzg0ixsW0PpeVIhjDgj\"\r\n        redirectUri={window.location.origin}\r\n    >\r\n        <App />\r\n    </Auth0Provider>, \r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}