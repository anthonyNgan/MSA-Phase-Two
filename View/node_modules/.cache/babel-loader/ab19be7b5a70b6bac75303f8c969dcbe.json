{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\antho\\\\source\\\\repos\\\\MSA-Phase-Two\\\\view\\\\src\\\\components\\\\Chiropractors\\\\Chiropractors.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { getArray, postArray, editArray, deleteArray } from '../../api/api';\nimport { useForm } from 'react-hook-form';\nimport { Button, TextField } from \"@material-ui/core/\";\nimport MaterialTable from \"material-table\";\nexport const Chiropractors = () => {\n  const [chiropractorDetails, setchiropractorDetails] = useState([]);\n  const [formData, setFormData] = useState([]);\n  const {\n    handleSubmit,\n    errors\n  } = useForm();\n\n  const handleChange = e => {\n    setFormData({ ...formData,\n      [e.target.name]: e.target.value\n    });\n    console.log(formData);\n  };\n\n  const onSubmit = data => {\n    console.log(\"Submit: \", formData);\n    postArray(formData);\n  };\n\n  const deletePost = async id => {\n    await deleteArray(id);\n  };\n\n  const editPost = async id => {\n    console.log(id);\n    await editArray(id);\n  };\n\n  useEffect(() => {\n    const makeArrayRequest = async () => {\n      setchiropractorDetails(await getArray());\n    };\n\n    makeArrayRequest();\n  }, [handleChange, deletePost, editPost]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, \"List of Chiropractors\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, \"Add new Chiropractor\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, \"Id: \"), /*#__PURE__*/React.createElement(TextField, {\n    type: \"text\",\n    id: \"id\",\n    name: \"ID\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }, \"First Name: \"), /*#__PURE__*/React.createElement(TextField, {\n    type: \"text\",\n    id: \"firstName\",\n    name: \"firstName\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }), errors.firstName && errors.firstName.message, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }, \"Last Name: \"), /*#__PURE__*/React.createElement(TextField, {\n    type: \"text\",\n    id: \"lastName\",\n    name: \"lastName\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }), errors.lastname && errors.lastname.message, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    type: \"submit\",\n    value: \"Submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }, \"Add New\")), /*#__PURE__*/React.createElement(MaterialTable, {\n    editable: {\n      isEditable: rowData => rowData.name === 'a',\n      // only name(a) rows would be editable\n      isEditHidden: rowData => rowData.name === 'x',\n      isDeletable: rowData => rowData.name === 'b',\n      // only name(b) rows would be deletable,\n      isDeleteHidden: rowData => rowData.name === 'y',\n      onBulkUpdate: changes => new Promise((resolve, reject) => {\n        setTimeout(() => {\n          /* setData([...data, newData]); */\n          resolve();\n        }, 1000);\n      }),\n      onRowAddCancelled: rowData => console.log('Row adding cancelled'),\n      onRowUpdateCancelled: rowData => console.log('Row editing cancelled'),\n      onRowAdd: newData => new Promise((resolve, reject) => {\n        setTimeout(() => {\n          /* setData([...data, newData]); */\n          resolve();\n        }, 1000);\n      }),\n      onRowUpdate: (newData, oldData) => new Promise((resolve, reject) => {\n        setTimeout(() => {\n          const dataUpdate = [...data];\n          const index = oldData.tableData.id;\n          dataUpdate[index] = newData;\n          setData([...dataUpdate]);\n          resolve();\n        }, 1000);\n      }),\n      onRowDelete: oldData => new Promise((resolve, reject) => {\n        setTimeout(() => {\n          const dataDelete = [...data];\n          const index = oldData.tableData.id;\n          dataDelete.splice(index, 1);\n          setData([...dataDelete]);\n          resolve();\n        }, 1000);\n      })\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }), chiropractorDetails.map(x => /*#__PURE__*/React.createElement(\"li\", {\n    key: x.chiropractorId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 22\n    }\n  }, \" \", x.firstName, \" \", x.lastName, \" \", x.emailAddress, \" \", x.phoneNumber, \" \", x.timeCreated, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    type: \"submit\",\n    value: \"Submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 33\n    }\n  }, \"Submit\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"default\",\n    onClick: () => editPost(x.chiropractorId),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }\n  }, \"Update\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: () => deletePost(x.chiropractorId),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }\n  }, \" Delete\"))));\n};\nexport default Chiropractors;","map":{"version":3,"sources":["C:/Users/antho/source/repos/MSA-Phase-Two/view/src/components/Chiropractors/Chiropractors.tsx"],"names":["React","useState","useEffect","getArray","postArray","editArray","deleteArray","useForm","Button","TextField","MaterialTable","Chiropractors","chiropractorDetails","setchiropractorDetails","formData","setFormData","handleSubmit","errors","handleChange","e","target","name","value","console","log","onSubmit","data","deletePost","id","editPost","makeArrayRequest","firstName","message","lastname","isEditable","rowData","isEditHidden","isDeletable","isDeleteHidden","onBulkUpdate","changes","Promise","resolve","reject","setTimeout","onRowAddCancelled","onRowUpdateCancelled","onRowAdd","newData","onRowUpdate","oldData","dataUpdate","index","tableData","setData","onRowDelete","dataDelete","splice","map","x","chiropractorId","lastName","emailAddress","phoneNumber","timeCreated"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { IChiropractors } from '../../common/Interface';\r\n\r\nimport { getArray, postArray, editArray, deleteArray } from '../../api/api';\r\nimport { useForm } from 'react-hook-form';\r\n\r\nimport { Button, TextField } from \"@material-ui/core/\";\r\nimport MaterialTable from \"material-table\";\r\n\r\nexport const Chiropractors = () => {\r\n\r\n    const [chiropractorDetails, setchiropractorDetails] = useState<any[]>([]);\r\n    const [formData, setFormData] = useState<any[]>([]);\r\n    const { handleSubmit, errors } = useForm<IChiropractors>();\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setFormData({ ...formData, [e.target.name]: e.target.value })\r\n        console.log(formData)\r\n    }\r\n\r\n    const onSubmit = (data: IChiropractors | {}) => {\r\n        console.log(\"Submit: \", formData);\r\n        postArray(formData)\r\n    }\r\n\r\n    const deletePost = async (id: any) => {\r\n        await deleteArray(id)\r\n    };\r\n\r\n    const editPost = async (id: any | {}) => {\r\n        console.log(id);\r\n        await editArray(id)\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        const makeArrayRequest = async () => {\r\n            setchiropractorDetails(await getArray());\r\n        }\r\n        makeArrayRequest();\r\n    }, [handleChange, deletePost, editPost])\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3>List of Chiropractors</h3>\r\n            \r\n            <h3>Add new Chiropractor</h3>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <label>Id: </label>\r\n                <TextField\r\n                    type=\"text\"\r\n                    id=\"id\"\r\n                    name=\"ID\"\r\n                />\r\n                <label>First Name: </label>\r\n                <TextField\r\n                    type=\"text\"\r\n                    id=\"firstName\"\r\n                    name=\"firstName\"\r\n                    onChange={handleChange}\r\n\r\n                />\r\n\r\n                {errors.firstName && errors.firstName.message}\r\n                <label>Last Name: </label>\r\n                <TextField\r\n                    type=\"text\"\r\n                    id=\"lastName\"\r\n                    name=\"lastName\"\r\n                    onChange={handleChange}\r\n                />\r\n                {errors.lastname && errors.lastname.message}\r\n\r\n                <Button variant=\"contained\" color=\"primary\" type=\"submit\" value=\"Submit\">Add New</Button>\r\n            </form>\r\n            <MaterialTable\r\n            editable={{\r\n                isEditable: rowData => rowData.name === 'a', // only name(a) rows would be editable\r\n                isEditHidden: rowData => rowData.name === 'x',\r\n                isDeletable: rowData => rowData.name === 'b', // only name(b) rows would be deletable,\r\n                isDeleteHidden: rowData => rowData.name === 'y',\r\n                onBulkUpdate: changes => \r\n                    new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                            /* setData([...data, newData]); */\r\n        \r\n                            resolve();\r\n                        }, 1000);\r\n                    }),\r\n                onRowAddCancelled: rowData => console.log('Row adding cancelled'),\r\n                onRowUpdateCancelled: rowData => console.log('Row editing cancelled'),\r\n                onRowAdd: newData =>\r\n                    new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                            /* setData([...data, newData]); */\r\n        \r\n                            resolve();\r\n                        }, 1000);\r\n                    }),\r\n                onRowUpdate: (newData, oldData) =>\r\n                    new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                            const dataUpdate = [...data];\r\n                            const index = oldData.tableData.id;\r\n                            dataUpdate[index] = newData;\r\n                            setData([...dataUpdate]);\r\n        \r\n                            resolve();\r\n                        }, 1000);\r\n                    }),\r\n                onRowDelete: oldData =>\r\n                    new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                            const dataDelete = [...data];\r\n                            const index = oldData.tableData.id;\r\n                            dataDelete.splice(index, 1);\r\n                            setData([...dataDelete]);\r\n        \r\n                            resolve();\r\n                        }, 1000);\r\n                    })\r\n            }}\r\n            />\r\n\r\n            {chiropractorDetails.map(\r\n                x => <li key={x.chiropractorId}> {x.firstName} {x.lastName} {x.emailAddress} {x.phoneNumber} {x.timeCreated}                 \r\n                                <Button variant=\"contained\" color=\"primary\" type=\"submit\" value=\"Submit\">Submit</Button>\r\n\r\n                <Button variant=\"contained\" color=\"default\" onClick={() => editPost(x.chiropractorId)}>Update</Button>\r\n                <Button variant=\"contained\" color=\"secondary\" onClick={() => deletePost(x.chiropractorId)}> Delete</Button>\r\n\r\n                </li>\r\n                \r\n            )}\r\n\r\n            \r\n        </>\r\n    )\r\n}\r\nexport default Chiropractors;"]},"metadata":{},"sourceType":"module"}