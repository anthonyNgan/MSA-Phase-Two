{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\antho\\\\source\\\\repos\\\\chiropractordashboard\\\\chiropractordashboard\\\\View\\\\app\\\\src\\\\components\\\\AppMenu\\\\AppMenuItem.tsx\";\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport Collapse from '@material-ui/core/Collapse';\nimport IconExpandLess from '@material-ui/icons/ExpandLess';\nimport IconExpandMore from '@material-ui/icons/ExpandMore';\nimport AppMenuItemRouter from './AppMenuItemRouter';\nexport const AppMenuItemPropTypes = {\n  name: PropTypes.string.isRequired,\n  link: PropTypes.string,\n  Icon: PropTypes.elementType,\n  items: PropTypes.array\n};\n\nconst AppMenuItem = props => {\n  const {\n    name,\n    link,\n    Icon,\n    items = []\n  } = props;\n  const classes = useStyles();\n  const isExpandable = items && items.length > 0;\n  const [open, setOpen] = useState(false);\n\n  function handleClick() {\n    setOpen(!open);\n  }\n\n  const MenuItemRoot = /*#__PURE__*/React.createElement(AppMenuItemRouter, {\n    className: classes.menuItem,\n    link: link,\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, !!Icon && /*#__PURE__*/React.createElement(ListItemIcon, {\n    className: classes.menuItemIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(ListItemText, {\n    primary: name,\n    inset: !Icon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }), isExpandable && !open && /*#__PURE__*/React.createElement(IconExpandMore, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 36\n    }\n  }), isExpandable && open && /*#__PURE__*/React.createElement(IconExpandLess, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 35\n    }\n  }));\n  const MenuItemChildren = isExpandable ? /*#__PURE__*/React.createElement(Collapse, {\n    in: open,\n    timeout: \"auto\",\n    unmountOnExit: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(List, {\n    component: \"div\",\n    disablePadding: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, items.map((item, index) => /*#__PURE__*/React.createElement(AppMenuItem, Object.assign({}, item, {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 21\n    }\n  }))))) : null;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, MenuItemRoot, MenuItemChildren);\n};\n\nAppMenuItem.propTypes = AppMenuItemPropTypes;\nconst useStyles = makeStyles(theme => createStyles({\n  menuItem: {\n    '&.active': {\n      background: 'light-blue',\n      '& .MuiListItemIcon-root': {\n        color: '#fff'\n      }\n    }\n  },\n  menuItemIcon: {\n    color: '#fff'\n  }\n}));\nexport default AppMenuItem;","map":{"version":3,"sources":["C:/Users/antho/source/repos/chiropractordashboard/chiropractordashboard/View/app/src/components/AppMenu/AppMenuItem.tsx"],"names":["React","useState","PropTypes","makeStyles","createStyles","List","ListItemIcon","ListItemText","Divider","Collapse","IconExpandLess","IconExpandMore","AppMenuItemRouter","AppMenuItemPropTypes","name","string","isRequired","link","Icon","elementType","items","array","AppMenuItem","props","classes","useStyles","isExpandable","length","open","setOpen","handleClick","MenuItemRoot","menuItem","menuItemIcon","MenuItemChildren","map","item","index","propTypes","theme","background","color"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {makeStyles, createStyles} from '@material-ui/core/styles';\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Collapse from '@material-ui/core/Collapse';\r\n\r\nimport IconExpandLess from '@material-ui/icons/ExpandLess';\r\nimport IconExpandMore from '@material-ui/icons/ExpandMore';\r\n\r\nimport AppMenuItemRouter from './AppMenuItemRouter';\r\n\r\nexport const AppMenuItemPropTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    link: PropTypes.string,\r\n    Icon: PropTypes.elementType,\r\n    items: PropTypes.array,\r\n}\r\n\r\ntype AppMenuItemPropTypes = PropTypes.InferProps<typeof AppMenuItemPropTypes>\r\ntype AppMenuItemPropsWithoutItems = Omit<AppMenuItemPropTypes, 'items'>\r\n\r\nexport type AppMenuItemProps = AppMenuItemPropsWithoutItems & {\r\n    items?: AppMenuItemProps[]\r\n}\r\n\r\nconst AppMenuItem: React.FC<AppMenuItemProps> = props => {\r\n    const { name, link, Icon, items = [] } = props\r\n    const classes = useStyles()\r\n    const isExpandable = items && items.length > 0\r\n    const [open, setOpen] = useState(false)\r\n\r\n    function handleClick() {\r\n        setOpen(!open)\r\n    }\r\n\r\n    const MenuItemRoot = (\r\n        <AppMenuItemRouter className={classes.menuItem} link={link} onClick={handleClick}>\r\n            {!!Icon && (\r\n            <ListItemIcon className={classes.menuItemIcon}>\r\n                <Icon />\r\n               </ListItemIcon>\r\n            )}\r\n        <ListItemText primary={name} inset={!Icon} />\r\n        { isExpandable && !open && <IconExpandMore /> }\r\n        { isExpandable && open && <IconExpandLess /> }\r\n        </AppMenuItemRouter>\r\n        )\r\n\r\n    const MenuItemChildren = isExpandable ? (\r\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n            <Divider />\r\n            <List component=\"div\" disablePadding>\r\n                {items.map((item, index) => (\r\n                    <AppMenuItem {...item} key={index} />\r\n                ))}\r\n            </List>\r\n        </Collapse>\r\n    ) : null\r\n\r\n\r\n    return (\r\n        <>\r\n            {MenuItemRoot}\r\n            {MenuItemChildren}\r\n        </>\r\n    )\r\n}\r\n            AppMenuItem.propTypes = AppMenuItemPropTypes\r\n\r\n            const useStyles = makeStyles(theme =>\r\n    createStyles({\r\n        menuItem: {\r\n            '&.active': {\r\n                background: 'light-blue',\r\n                '& .MuiListItemIcon-root': {\r\n                    color: '#fff'\r\n                },\r\n            },\r\n        },\r\n        menuItemIcon: {\r\n            color: '#fff',\r\n        },\r\n    }),\r\n)\r\n\r\nexport default AppMenuItem;"]},"metadata":{},"sourceType":"module"}